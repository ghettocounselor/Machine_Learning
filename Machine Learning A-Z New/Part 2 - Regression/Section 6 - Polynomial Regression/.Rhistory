p +
geom_jitter() +
geom_boxplot(alpha=0.7)
#Good. Now add size and colour to the points:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha=0.7)
#Add a boxplot instead of the points
p +
geom_boxplot()
#See the remaining black points? Where are they from?
#They are part of the boxplot - Refer to our observation (*) above
# check here
p +
geom_boxplot() # these are a part of the box plot
#Good. Now add size and colour to the points:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha=0.7)
#Let's remove them:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
#Let's "Save" our progress by placing it into a new object:
q <- p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
q
#Non-data ink
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
#Theme
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
)
q
#Final touch. We haven't discussed this in the course,
#However this is how you can change individual legend titles:
q$labels$size = "Budget $M"
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
)
q
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
t <- ggplot(data=movies, aes(x=AudienceRating))
t
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
movies <- read.csv("Section6Datafile - Movie-Ratings.csv")
movies
t <- ggplot(data=movies, aes(x=AudienceRating))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
library(ggplot2)
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
#another way - it's really a matter of taste which way you go this
# define the aesthetics initially then change, perhaps when stacking graphs
t <- ggplot(data=movies)
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White", colour="Blue")
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
colnames(movies) <- c("Film","Genre","CriticRating","AudienceRating","BudgetMillions","Year")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year)
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
h2o.init()
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
h2o.init()
h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
Java_home=/Library/Java/JavaVirtualMachines/jdk1.8.0_212
Java_home=Library/Java/JavaVirtualMachines/jdk1.8.0_212
Java_home='Library/Java/JavaVirtualMachines/jdk1.8.0_212'
localH2O = h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
localH2O = h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
Java_home='Library/Java/JavaVirtualMachines/jdk1.8.0_212'
Java_home
install.packages("h2o", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-jacobi/2/R", getOption("repos"))))
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Sys.setenv(Java_home='Library/Java/JavaVirtualMachines/jdk1.8.0_212')
Sys.getenv(Java_home)
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.getenv(Java_home)
Java_home
h2o.init()
install.packages(c("assertthat", "boot", "caret", "class", "cli", "cluster", "codetools", "colorspace", "data.table", "ggplot2", "glue", "gtable", "httpuv", "igraph", "ipred", "lazyeval", "MASS", "Matrix", "mgcv", "nlme", "Rcpp", "rlang", "rpart", "shiny", "stringi", "survival", "tibble", "xtable"))
library('h2o')
{
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
}
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
# not run {
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
# }
Java_home
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Java_home
Sys.getenv("Java_home")
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.getenv("Java_home")
getwd()
# https://www.rdocumentation.org/packages/base/versions/3.5.3/topics/Sys.setenv
Sys.setenv(Java_home="Library//Java//JavaVirtualMachines//jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
Sys.setenv(Java_home="Library\\Java\\JavaVirtualMachines\\jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
Sys.setenv(Java_home="\\Library\\Java\\JavaVirtualMachines\\jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
setwd("~/Machine_Learning/Machine Learning A-Z New/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# Multiple Linear Regression
getwd()
# Importing the dataset
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
library(caTools)
set.seed(123)
# dependent variable is Profit
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
# ======= Fitting Multiple Linear Regression to the Training set
# so lets build a regression model and we'll call it regressor
regressor = lm(formula = Profit ~ .,
data = training_set)
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
summary(regressor)
# ======== couple cool ways to export data from regressor to file
# word doc
library(apaStyle)
# ======== couple cool ways to export data from regressor to file
# word doc
install.packages(apaStyle)
install.packages('apaStyle')
dput(summary(lm(Profit ~ .)),file="summary_lm.txt",control="all")
dput(summary(lm(Profit ~ .,data = training_set)),file="summary_lm.txt",control="all")
res=dget("summary_lm.txt")
View(res)
library("broom", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
a <- lm(formula = Profit ~ .,
data = training_set)
write.csv( tidy( a ) , "regressor_coefs.csv" )
write.csv( glance( a ) , "regressor_an.csv" )
summary(regressor)
# ======= Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
y_pred
write.csv(tidy(y_pred) , "y_pred_profit-testData.csv")
write.csv(glance(y_pred) , "y_pred_profit-testData.csv")
write.csv(tidy(y_pred) , "y_pred_profit-testData.csv")
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
summary(regressor)
a <- summary(regressor)
write.csv( tidy( a ) , "Relim1_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim1_regressor_an.csv" )
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset) # we'll use dataset as a whole but we could use only training
summary(regressor)
a <- summary(regressor)
write.csv( tidy( a ) , "Relim1_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim1_regressor_an.csv" )
summary(regressor)
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = training_set)
summary(regressor)
a <- summary(regressor)
write.csv( tidy( a ) , "Relim2_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim2_regressor_an.csv" )
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = training_set)
summary(regressor)
a <- summary(regressor)
write.csv( tidy( a ) , "Relim3_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim3_regressor_an.csv" )
regressor = regressor = lm(formula = Profit ~ R.D.Spend,
data = training_set)
summary(regressor)
a <- summary(regressor)
write.csv( tidy( a ) , "Relim4_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim4_regressor_an.csv" )
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
## save our work to file
a <- summary(regressor)
write.csv( tidy( a ) , "Relim2_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim2_regressor_an.csv" )
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
## save our work to file
a <- summary(regressor)
write.csv( tidy( a ) , "Relim3_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim3_regressor_an.csv" )
regressor = regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
## save our work to file
a <- summary(regressor)
write.csv( tidy( a ) , "Relim4_regressor_coefs.csv" )
write.csv( glance( a ) , "Relim4_regressor_an.csv" )
# get information ready
getwd()
dataset = read.csv('/Users/markloessi/Machine_Learning/Machine Learning A-Z New/Part 2 - Regression/Section 5 - Multiple Linear Regression/50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = training_set)
regressor = lm(formula = Profit ~ .,
data = training_set)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)){
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl){
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1,2,3,4,5)]
backwardElimination(training_set, SL)
a <- summary(regressor)
write.csv( tidy( a ) , "Automated_regressor_coefs.csv" )
write.csv( glance( a ) , "Automated_regressor_an.csv" )
setwd("~/Machine_Learning/Machine Learning A-Z New/Part 2 - Regression/Section 6 - Polynomial Regression")
# Polynomial Regression
getwd()
dataset = read.csv('Position_Salaries.csv')
View(dataset)
View(dataset)
View(dataset)
dataset = dataset[2:3]
View(dataset)
lin_regressor = lm(formula = Salary ~ .,
data = dataset)
View(lin_regressor)
lin_regressor = lm(formula = Salary ~ .,
data = dataset)
summary(lin_regressor)
dataset$Level2 = dataset$Level^2
View(dataset)
View(dataset)
dataset$Level3 = dataset$Level^3
View(dataset)
View(dataset)
dataset$Level4 = dataset$Level^4
poly_regressor = lm(formula = Salary ~ .,
data = dataset)
summary(lin_regressor)
summary(poly_regressor)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(lin_regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Linear Regression)') +
xlab('Level') +
ylab('Salary')
a <- lin_regressor = lm(formula = Salary ~ .,
data = dataset)
write.csv( tidy( a ) , "lin_regressor_coefs.csv" )
write.csv( glance( a ) , "lin_regressor_an.csv" )
a <- lin_regressor = lm(formula = Salary ~ .,
data = dataset)
a <- lm(formula = Salary ~ .,
data = dataset)
write.csv( tidy( a ) , "lin_regressor_coefs.csv" )
write.csv( glance( a ) , "lin_regressor_an.csv" )
a <- lin_regressor
write.csv( tidy( a ) , "lin_regressor_coefs.csv" )
write.csv( glance( a ) , "lin_regressor_an.csv" )
a <- poly_regressor
write.csv( tidy( a ) , "poly_regressor_coefs.csv" )
write.csv( glance( a ) , "poly_regressor_an.csv" )
write.csv( tidy( poly_regressor ) , "poly_regressor_coefs.csv" )
write.csv( glance( poly_regressor ) , "poly_regressor_an.csv" )
write.csv( tidy( lin_regressor ) , "lin_regressor_coefs.csv" )
write.csv( glance( lin_regressor ) , "lin_regressor_an.csv" )
ggsave("lin_graph.pdf")
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(poly_regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggsave("poly_graph.pdf")
View(dataset)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_regressor,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression)') +
xlab('Level') +
ylab('Salary')
ggsave("poly_graph_HD.pdf")
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(poly_regressor,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
colour = 'blue') +
ggtitle('Truth or Bluff (Polynomial Regression HIGH DENSITY)') +
xlab('Level') +
ylab('Salary')
# save graph to file
ggsave("poly_graph_HD.pdf")
lin_pred <- predict(lin_regressor, data.frame(Level = 6.5))
lin_pred
lin_pred
fileConn<-file("lin_pred.txt")
writeLines(lin_pred, fileConn)
close(fileConn)
fileConn<-file("lin_pred.txt")
writeLines(c(lin_pred), fileConn)
close(fileConn)
fileConn<-file("lin_pred.txt")
writeLines(c('lin_pred'), fileConn)
close(fileConn)
write.csv( tidy( lin_pred ) , "lin_pred.txt" )
write.txt( tidy( lin_pred ) , "lin_pred.txt" )
write.text( tidy( lin_pred ) , "lin_pred.txt" )
write.csv( tidy( lin_pred ) , "lin_pred.txt" )
poly_pred <- predict(poly_regressor, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
poly_pred
write.csv( tidy( poly_pred ) , "poly_pred.txt" )
