colnames(mov2)
colnametest <- colnames(mov2)
colnametest
colnametest(18)
colnametest(17;18)
colnametest(17:18)
colnametest(17,18)
colnametest(c(17,18)
colnametest(c(17,18))
isvector(colnametest)
is.vector(colnametest)
coltest <- c(18)
coltest
coltest <- colnametest(18)
coltest <- colnametest(c(18)
coltest
summary(mov2)
coltest[18]
colnametest[18]
colnametest[18]
summary(mov2)
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to fin out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gross % US))
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to find out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y="Gross % US"))
p #Nothing happens. We need a geom.
mov2
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to find out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gross...US))
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
#Prepare the plot's data and aes layers
#Note we did not rename the columns.
#Use str() or summary() to find out the correct column names
p <- ggplot(data=mov2, aes(x=Genre, y=Gross...US))
#another way
filt2 <- mov$Studio %in% c("Buena Vista Studios","WB","Fox","Universal","Sony","Paramount Pictures")
#Apply the row filters to the dataframe
mov2 <- mov[filt & filt2,]
mov2
summary(mov2)
summary(mov2)
summary(mov2)
summary(mov2)
summary(mov2)
colnames(mov2)
colnametest <- colnames(mov2)
#Add a Point Geom Layer
p +
geom_point()
#Add a boxplot instead of the points
p +
boxplot()
#Add a boxplot instead of the points
p +
boxplot()
#Add a boxplot instead of the points
p +
geom_boxplot()
#Add points
p +
geom_boxplot() +
geom_jitter()
#Add points
p +
geom_boxplot() +
geom_points()
#Replace points with jitter
p +
geom_boxplot() +
geom_jitter()
#Add points
p +
geom_boxplot() +
geom_points()
#Replace points with jitter
p +
geom_boxplot() +
geom_jitter()
#Add points
p +
geom_boxplot() +
geom_points()
#Add points
p +
geom_boxplot() +
geom_point()
#Place boxplot on top of jitter
p +
geom_jitter() +
geom_boxplot()
#Add boxplot transparency
p +
geom_jitter() +
geom_boxplot(alpha=0.7)
#Good. Now add size and colour to the points:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha=0.7)
#Add a boxplot instead of the points
p +
geom_boxplot()
#See the remaining black points? Where are they from?
#They are part of the boxplot - Refer to our observation (*) above
# check here
p +
geom_boxplot() # these are a part of the box plot
#Good. Now add size and colour to the points:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha=0.7)
#Let's remove them:
p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
#Let's "Save" our progress by placing it into a new object:
q <- p +
geom_jitter(aes(size=Budget...mill., colour=Studio)) +
geom_boxplot(alpha = 0.7, outlier.colour = NA)
q
#Non-data ink
q <- q +
xlab("Genre") + #x axis title
ylab("Gross % US") + #y axis title
ggtitle("Domestic Gross % by Genre") #plot title
q
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20))
#Theme
q <- q +
theme(
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
)
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
)
q
#Final touch. We haven't discussed this in the course,
#However this is how you can change individual legend titles:
q$labels$size = "Budget $M"
q
#Theme
q <- q +
theme(
#Axes titles:
axis.title.x = element_text(colour="Blue", size=30),
axis.title.y = element_text(colour="Blue", size=30),
#Axes texts:
axis.text.x = element_text(size=20),
axis.text.y = element_text(size=20),
#Plot title:
plot.title = element_text(colour="Black",
size=40),
#Legend title:
legend.title = element_text(size=20),
#Legend text
legend.text = element_text(size=12)
#this is a shortcut to alter ALL text elements at once:
text = element_text(family="Comic Sans MS"),
)
q
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
t <- ggplot(data=movies, aes(x=AudienceRating))
t
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
movies <- read.csv("Section6Datafile - Movie-Ratings.csv")
movies
t <- ggplot(data=movies, aes(x=AudienceRating))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
library(ggplot2)
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
#another way - it's really a matter of taste which way you go this
# define the aesthetics initially then change, perhaps when stacking graphs
t <- ggplot(data=movies)
t + geom_histogram(binwidth = 10,
aes(x=AudienceRating),
fill="White", colour="Blue")
ggplot(data=movies, aes(x=CriticRating, y=AudienceRating)) +
geom_point()
colnames(movies) <- c("Film","Genre","CriticRating","AudienceRating","BudgetMillions","Year")
t <- ggplot(data=movies, aes(x=AudienceRating))
t + geom_histogram(binwidth = 10,
fill="White", colour="Blue")
w + geom_point(aes(size=BudgetMillions)) +
geom_smooth() +
facet_grid(Genre~Year)
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
h2o.init()
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
install.packages("h2o", type = "source", repos = (c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
h2o.init()
h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
Java_home=/Library/Java/JavaVirtualMachines/jdk1.8.0_212
Java_home=Library/Java/JavaVirtualMachines/jdk1.8.0_212
Java_home='Library/Java/JavaVirtualMachines/jdk1.8.0_212'
localH2O = h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
localH2O = h2o.init(ip = "localhost", port = 54321, name = NA_character_,
startH2O = TRUE, forceDL = FALSE, enable_assertions = TRUE,
license = NULL, nthreads = -1, max_mem_size = NULL,
min_mem_size = NULL, ice_root = tempdir(), log_dir = NA_character_,
log_level = NA_character_, strict_version_check = TRUE,
proxy = NA_character_, https = FALSE, insecure = FALSE,
username = NA_character_, password = NA_character_,
cookies = NA_character_, context_path = NA_character_,
ignore_config = FALSE, extra_classpath = NULL,
jvm_custom_args = NULL, bind_to_localhost = TRUE)
Java_home='Library/Java/JavaVirtualMachines/jdk1.8.0_212'
Java_home
install.packages("h2o", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-jacobi/2/R", getOption("repos"))))
library("h2o", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Sys.setenv(Java_home='Library/Java/JavaVirtualMachines/jdk1.8.0_212')
Sys.getenv(Java_home)
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.getenv(Java_home)
Java_home
h2o.init()
install.packages(c("assertthat", "boot", "caret", "class", "cli", "cluster", "codetools", "colorspace", "data.table", "ggplot2", "glue", "gtable", "httpuv", "igraph", "ipred", "lazyeval", "MASS", "Matrix", "mgcv", "nlme", "Rcpp", "rlang", "rpart", "shiny", "stringi", "survival", "tibble", "xtable"))
library('h2o')
{
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
}
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
# not run {
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
# }
Java_home
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Java_home
Sys.getenv("Java_home")
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.getenv("Java_home")
getwd()
# https://www.rdocumentation.org/packages/base/versions/3.5.3/topics/Sys.setenv
Sys.setenv(Java_home="Library//Java//JavaVirtualMachines//jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
Sys.setenv(Java_home="Library/Java/JavaVirtualMachines/jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
Sys.setenv(Java_home="Library\\Java\\JavaVirtualMachines\\jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
Sys.setenv(Java_home="\\Library\\Java\\JavaVirtualMachines\\jdk1.8.0_212")
Sys.getenv("Java_home")
h2o.init()
setwd('/Users/markloessi/Machine_Learning/Machine Learning A-Z New/Part 2 - Regression/Section 4 - Simple Linear Regression')
# ======= Importing the dataset
dataset = read.csv('Salary_Data.csv')
library(caTools)
set.seed(123)
# dependent variable is Salary
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
# see some details of the regressor
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
?ggplot
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
legend.position = c(0.95, 0.95),
legend.justification = c("right", "top")
)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
# legend.position = c(0.95, 0.95),
legend.justification = c("right", "top")
)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
# legend.position = c(0.95, 0.95),
legend.justification = c("left", "top")
)
library(tidyverse)
install.packages('tidyverse')
# install.packages('tidyverse')
library(tidyverse)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
# legend.position = c(0.95, 0.95),
legend.justification = c("left", "top")
)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
legend.position = c(0.95, 0.95),
legend.justification = c("left", "top")
legend.title = 'Legend'
)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
legend.position = c(0.95, 0.95),
legend.justification = c("left", "top")
legend.title = ('Legend')
)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
legend.position = c(0.95, 0.95),
legend.justification = c("left", "top"),
legend.title = ('Legend')
)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
theme(
legend.position = c(0.95, 0.95),
legend.justification = c("left", "top"),
legend.title = 'Legend'
)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
guides(colour = guide_legend(override.aes = list(alpha = 1)))
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# regression line
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set Data)') +
xlab('Years of experience') +
ylab('Salary') +
+ theme(legend.key = element_rect(color=NA, fill="white"))
# Multiple Linear Regression
getwd()
setwd("~/Machine_Learning/Machine Learning A-Z New/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# Multiple Linear Regression
getwd()
